CompUnit            ::= [CompUnit] (Decl | FuncDef);

Decl                     ::= ConstDecl | VarDecl;
ConstDecl            ::= "const" BType ConstDefs ";";
BType                  ::= "int";
ConstDefs            ::= ConstDef {"," ConstDef};
ConstDef             ::= IDENT [ArraySize] "=" ConstInitVal;
ConstInitVal         ::= ConstExp | "{" [ConstInitVals] "}";
ConstInitVals        ::= ConstInitVal {"," ConstInitVal};
VarDecl                ::= BType VarDefs ";";
VarDefs                ::= VarDef {"," VarDef};
VarDef                 ::= IDENT [{ArraySize}] "=" InitVal;
InitVal                 ::= Exp | "{" [InitVals] "}";
InitVals                ::= InitVal {"," InitVal};

FuncDef       ::= FuncType IDENT "(" [FuncFParams] ")" Block;
FuncType      ::= "void" | "int";
FuncFParams   ::= FuncFParam {"," FuncFParam};
FuncFParam ::= BType IDENT ["[" "]" ArraySize];

ArraySize ::= "[" CosntExp "]" {"[" ConstExp "]"};

Block         ::= "{" [BlockItem] "}";
BlockItem     ::= {BlockItem} Decl | Stmt;
Stmt ::= MatchedStmt | OpenStmt;
MatchedStmt ::= "if" "(" Exp ")" MatchedStmt "else" MatchedStmt
                |  LVal "=" Exp ";"
                | [Exp] ";"
                | Block
                | "while" "(" Exp ")" Stmt
                | "break" ";"
                | "continue" ";"
                | "return" [Exp] ";";
OpenStmt ::= "if" "(" Exp ') Stmt | "if" "(" Exp ') MatchedStmt "else" OpenStmtï¼›

Exp           ::= LOrExp;
LVal          ::= IDENT {"[" Exp "]"};
PrimaryExp    ::= "(" Exp ")" | LVal | Number;
Number        ::= INT_CONST;
UnaryExp      ::= PrimaryExp | IDENT "(" [FuncRParams] ")" | UnaryOp UnaryExp;
UnaryOp       ::= "+" | "-" | "!";
FuncRParams   ::= Exp {"," Exp};
MulExp        ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp         ::= RelExp | EqExp ("==" | "!=") RelExp;
LAndExp       ::= EqExp | LAndExp "&&" EqExp;
LOrExp        ::= LAndExp | LOrExp "||" LAndExp;
ConstExp      ::= Exp;
